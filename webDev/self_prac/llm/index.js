const jsonString = `
  {"projectRoot": {"frontend": {"public": {"index.html": "<html><head><title>Todo App</title></head><body><div id=\"root\"></div><script src=\"/src/index.js\"></script></body></html>", "manifest.json": "{\n \"short_name\": \"Todo App\",\n \"name\": \"Todo App\",\n \"icons\": [],\n \"start_url\": \"./\",\n \"display\": \"standalone\",\n \"theme_color\": \"#000000\",\n \"background_color\": \"#ffffff\"\n}", "robots.txt": "User-agent: *\nDisallow:"}, "src": {"components": {"Header.js": "import React from 'react';\n\nexport default function Header() {\n return (\n <header>\n <h1>Todo App</h1>\n </header>\n );\n}", "TodoList.js": "import React, { useState, useEffect } from 'react';\nimport TodoItem from './TodoItem';\nimport api from '../services/api';\n\nexport default function TodoList() {\n const [todos, setTodos] = useState([]);\n\n useEffect(() => {\n const fetchTodos = async () => {\n try {\n const response = await api.get('/todos');\n setTodos(response.data);\n } catch (error) {\n console.error('Error fetching todos:', error);\n }\n };\n fetchTodos();\n }, []);\n\n const handleToggleComplete = async (id) => {\n try {\n await api.put('/todos/id/toggle')\n const updatedTodos = todos.map(todo =>\n todo._id === id ? {...todo, completed: !todo.completed} : todo\n );\n setTodos(updatedTodos);\n } catch (error) {\n console.error(\"Error toggling todo:\", error);\n }\n };\n\n const handleDeleteTodo = async (id) => {\n try {\n await api.delete('/todos/id');\n setTodos(todos.filter(todo => todo._id !== id));\n } catch (error) {\n console.error('Error deleting todo:', error);\n }\n };\n\n return (\n <ul>\n {todos.map(todo => (\n <TodoItem\n key={todo._id}\n todo={todo}\n onToggleComplete={handleToggleComplete}\n onDeleteTodo={handleDeleteTodo}\n />\n ))}\n </ul>\n );\n}", "TodoItem.js": "import React from 'react';\n\nexport default function TodoItem({ todo, onToggleComplete, onDeleteTodo }) {\n return (\n <li>\n <input\n type=\"checkbox\"\n checked={todo.completed}\n onChange={() => onToggleComplete(todo._id)}\n />\n <span style={{ textDecoration: todo.completed ? 'line-through' : 'none' }}>\n {todo.text}\n </span>\n <button onClick={() => onDeleteTodo(todo._id)}>Delete</button>\n </li>\n );\n}"}, "services": {"api.js": "import axios from 'axios';\n\nconst api = axios.create({\n baseURL: '/api',\n});\n\nexport default api;"}}, "files": {"App.js": "import React from 'react';\nimport Header from './components/Header';\nimport TodoList from './components/TodoList';\nimport './index.css';\n\nexport default function App() {\n return (\n <div className=\"App\">\n <Header />\n <TodoList />\n </div>\n );\n}", "index.js": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n <React.StrictMode>\n <App />\n </React.StrictMode>\n);\n", "index.css": "body {\n font-family: sans-serif;\n margin: 20px;\n}\n\n.App {\n display: flex;\n flex-direction: column;\n align-items: center;\n}\n\nul {\n list-style: none;\n padding: 0;\n}\n\nli {\n display: flex;\n align-items: center;\n margin-bottom: 10px;\n}\n\nli input {\n margin-right: 10px;\n}\n\nli button {\n margin-left: auto;\n}"}}, "package.json": "{\n \"name\": \"todo-app\",\n \"version\": \"1.0.0\",\n \"description\": \"A simple todo app\",\n \"main\": \"index.js\",\n \"scripts\": {\n \"start\": \"react-scripts start\",\n \"build\": \"react-scripts build\",\n \"test\": \"react-scripts test\",\n \"eject\": \"react-scripts eject\"\n },\n \"dependencies\": {\n \"axios\": \"^1.4.0\",\n \"react\": \"^18.2.0\",\n \"react-dom\": \"^18.2.0\",\n \"react-scripts\": \"5.0.1\"\n },\n \"devDependencies\": {},\n \"proxy\": \"http://localhost:3001\"\n}"}, "backend": {"controllers": {"todoController.js": "const Todo = require('../models/todoModel');\n\nexports.createTodo = async (req, res) => {\n try {\n const newTodo = new Todo(req.body);\n await newTodo.save();\n res.status(201).json(newTodo);\n } catch (error) {\n res.status(500).json({ message: error.message });\n }\n};\n\nexports.getAllTodos = async (req, res) => {\n try {\n const todos = await Todo.find();\n res.json(todos);\n } catch (error) {\n res.status(500).json({ message: error.message });\n }\n};\n\nexports.toggleTodoComplete = async (req, res) => {\n try {\n const todo = await Todo.findById(req.params.id);\n if (!todo) return res.status(404).json({ message: 'Todo not found' });\n todo.completed = !todo.completed;\n await todo.save();\n res.json(todo);\n } catch (error) {\n res.status(500).json({ message: error.message });\n }\n};\n\nexports.deleteTodo = async (req, res) => {\n try {\n const todo = await Todo.findByIdAndDelete(req.params.id);\n if (!todo) return res.status(404).json({ message: 'Todo not found' });\n res.json({ message: 'Todo deleted' });\n } catch (error) {\n res.status(500).json({ message: error.message });\n }\n};"}, "models": {"todoModel.js": "const mongoose = require('mongoose');\n\nconst todoSchema = new mongoose.Schema({\n text: { type: String, required: true },\n completed: { type: Boolean, default: false },\n});\n\nmodule.exports = mongoose.model('Todo', todoSchema);"}, "routes": {"todoRoutes.js": "const express = require('express');\nconst router = express.Router();\nconst todoController = require('../controllers/todoController');\n\nrouter.post('/', todoController.createTodo);\nrouter.get('/', todoController.getAllTodos);\nrouter.put('/:id/toggle', todoController.toggleTodoComplete);\nrouter.delete('/:id', todoController.deleteTodo);\n\nmodule.exports = router;"}, "config": {"database.js": "const mongoose = require('mongoose');\n\nconst connectDB = async () => {\n try {\n const conn = await mongoose.connect(process.env.MONGO_URI);\n console.log('MongoDB Connected: conn.connection.host'');\n } catch (error) {\n console.error('Error: error.message');\n process.exit(1);\n }\n};\n\nmodule.exports = connectDB;"}, "server.js": "const express = require('express');\nconst connectDB = require('./config/database');\nconst todoRoutes = require('./routes/todoRoutes');\nconst cors = require('cors');\nrequire('dotenv').config();\n\nconst app = express();\nconst port = process.env.PORT || 3001;\n\napp.use(cors());\napp.use(express.json());\napp.use('/api/todos', todoRoutes);\n\nconnectDB().then(() => {\n app.listen(port, () => console.log('Server running on port port'));\n});"}, "package.json": "{\n \"name\": \"todo-backend\",\n \"version\": \"1.0.0\",\n \"description\": \"Backend for Todo App\",\n \"main\": \"server.js\",\n \"scripts\": {\n \"start\": \"node server.js\",\n \"dev\": \"nodemon server.js\"\n },\n \"dependencies\": {\n \"cors\": \"^2.8.5\",\n \"dotenv\": \"^16.0.3\",\n \"express\": \"^4.18.2\",\n \"mongoose\": \"^7.0.3\",\n \"nodemon\": \"^3.0.1\"\n }\n}"}, "db": {"setup_mongodb.sh": "#!/bin/bash\n# ... (your MongoDB setup commands)\nMONGO_URI=\"mongodb://localhost:27017/todo-app\"\nexport MONGO_URI\nmongod --dbpath ./data"}, "scripts": {"seed-db.sh": "#!/bin/bash\n# ... (your database seeding commands)", "deploy.sh": "#This is a placeholder. You would use this script to automate deployment to a Kubernetes cluster.\n#Example commands:\n#kubectl apply -f kubernetes.yaml\n#kubectl rollout restart deployment/todo-app-deployment"}, "files": {"README.md": "# Todo App\n\nThis is a full-stack todo app built with React, Node.js, Express, and MongoDB.", ".gitignore": "/node_modules\n/data\n.env", "docker-compose.yml": "version: '3.8'\nservices:\n todo-app-backend:\n build: ./backend\n ports:\n - \"3001:3001\"\n depends_on:\n - mongodb\n mongodb:\n image: mongo:latest\n volumes:\n - ./data:/data/db\n ports:\n - \"27017:27017\"\n", "kubernetes.yaml": "#This is a placeholder. A real Kubernetes deployment file would be needed here\n# This would include deployment specifications, services, and potentially ingress for accessing the application. Refer to Kubernetes documentation for creating such a file."}}}`;
`
// Remove "Response:" and any leading/trailing whitespace
const cleanJsonString = jsonString
  .replace(/^Response:\s*/, "") // Remove "Response:" prefix
  .replace(/\\/g, "\\\\") // Escape existing backslashes
  .replace(/\n/g, "\\n") // Escape newline characters
  .replace(/\r/g, "\\r") // Escape carriage returns
  .replace(/\t/g, "\\t") // Escape tabs
  .trim();

try {
  const parsedJson = JSON.parse(cleanJsonString);
  console.log(parsedJson); // This should now work without errors
} catch (error) {
  console.error("Error parsing JSON:", error);
}
